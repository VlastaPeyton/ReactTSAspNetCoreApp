-1) Kada se ovaj projekat pull-uje from Github, moram da u terminal navigiram to "frontend" folder i ukucam "npm install" kako bi instalirao sve packages from package.json 
jer sam njih u koracima 0-43 instalirao dok sam pravio frontend deo tj u node_modules, ali u .gitignore node_modules ne ide jer veliki, vec sve je u package.json zapisano
sta moram putem "npm install" da uradim.

0) Ovo je React TypeScript + .NET Core Finance projekat. Pored mog backend, koristim free FinancialModelingPrep API.
   Pre ovoga, naucio sam sve iz ReactJS foldera.

1) Kreiram "react_ts_and_aspnetcore_app" folder i vodim racuna da su sve mala slova, jer, zbog npm and package.json, ne moze da se kreira React App velikim slovima.

2) U VSC otvorim taj folder. Pa otvorim CMD i kucam "npx create-react-app frontend --template typescript"
i u "react_ts_and_aspnetcore_app" folderu dobijem "frontend" folder koji sadrzi sve kao i za React JS app da sam kreirao. 
Kao i ReactJS, dobijem node_modules, public i src foldere + .gitignore, package-lock.json, package.json i tsconfig.json files.
Za razliku od ReactApp, necu brisati nista iz src za sada. 
Kad push ovaj frontend folder na github, it wont push "node_modules" folder as normal behaviour, because it is too large and everything is written in package.json

3) Bolje koristiti .tsx file, nego .ts file, jer nekad compiler kuka ako je .ts file i za obican .ts file koji nema React component.

4) Instaliram VSC Extension "ES7+ React/Redux/React-Native snippets" from dsznajder publisher, da mogu da koristim u .tsx file
"rafce" za JS ili "tsrafce" za TS kad pravim React components da ne kucam onaj pocetni kod svaki put. 

5) U src folder dodam Components i Pages foldere. 
   U Components stavljam sve React components, dok u Pages stavljam web pages koje sadrze pojedine Components. 
   Za svaki Component imacu .tsx i .css file istog imena. U .tsx kucam sve, dok u .css samo CSS styling. Medjutim, koristicu Tailwind CSS, pa mi .css i ne treba.
   U Components pravim Card folder gde pravim Card.css i Card.tsx files.
   
6) Modifikujem App.tsx: built-in kod brisem iz return naredbe i dodam Card component.

7) Pokretanje ReactTS: mora terminal biti u "frontend" folderu i kucam "npm start" da otvori u Chrome applikaciju.

8) Brisem sve iz App.css i index.css, jer kucacu svoje kasnije za Tailwind. 

9) U Components folder pravim CardList folder with CardList.tsx i CardList.css files.

10) U Components folder pravim Search folder with Search.tsx i Search.css files.

11) Terminal navigiram u "frontend" folder i kucam "npm install axios --save" i "npm install --save-dev @types/axios" jer ocu axios sa tipovima (iako 
ne mora u TS tj moze i obican axios kao u ReactJS jer axios version > 0.14.x podrzava TS). Pa kucam "npm install dotenv --save" jer kad napravim .env file (u root lavel as package.json), 
moram imati ovo instalirano da bih mogo u ReactTS ocitati varijable iz .env file. Svaka .env variable mora imati "REACT_APP_" prefix.

12) U frontend folder dodam .env file, ali necu pisati API KEY za onaj sajt u njega, jer to je u api.tsx stavljeno 

13) u src folder dodam api.tsx file i company.d.ts file jer gadjam API sa nekog sajta dok u company.d.ts stavljam sve moguce tipove od tog API get
.d.ts je TS Declaration file koji govori axios biblioteci u kom formatu ce biti podaci koje dohvata/salje i u .d.ts file se ne stavlja logika, vec 
samo tipovi.

14) U frontend folder "npm install --save-dev @types/uuid"

15) U Components folder dodam Portfolio folder gde dodam  AddPortfolio folder gde dodam AddPortofolio.tsx i AddPortfolio.css
    Dodao i jos ove Portfolio foldere

16) U frontend folderu kucam "npm install -D tailwindcss@^3.4.1", a onda "npx tailwindcss init" sto ce da nam napravi tailwind.config.js koji nam treba

17) u Components dodam Navbar (Navbar.tsx/css) and Hero folder (Hero.tsx/css) koje sa tailwindcss kodiram 

18) Dodajem React Router Dom da napravim zeljene stranice unutar app. U terminal navigiram "frontend" folder i kucam "npm install -save react-router-dom", pa "npm install --save @types/react-router-dom" 
i pravim Routes folder i Pages folder. U terminal kucam "npm install react-router-dom@latest" da moze createBrowserRouter from "react-router-dom".

19) U Pages folder dodam zeljene foldere gde svaki prestavlja stranicu neku.

20) u Components create Sidebar folder 

21) U terminal navigiram u "frontend" folder i kucam "npm install react-icons"

22) U Components kreiranje CompanyProfile i IncomeStatement 

23) U Pages folder kreiranje DesignGuide page

24) U Components folder kreiranje Table koju koristim u DesignGuide page

25) U Components folder kreiranje RatioList koji koristim u DesignGuide

26) U Components folder kreiranje BalanceSheet 

27) U terminalu "npm i react-spinners" (cd frontend pre toga) for loading 

28) U Components folde kreiranje Spinner

29) U Components folder kreiranje TenK

// Sada pravim .NET backend 
// Napravio sam .NET backend (pogledaj "backend" folder) i nastavljam dalje ovde u frontend 

30) Terminal navigiram u "frontend" folder i kucam "npm install react-toastify"

31) Kreiram Services folder za AuthService

31) Kreiram ErrorHandler folder za AuthService.tsx gde ima LoginAPi i RegisterAPI da gadjaju u .NET backendu corresponding apis

31) Kreiram Models folder za UserProfileToken

32) Kreiram Context folder za global states koje koriste sve Components inside UserProvider (za likom Login i Register )

33) Terminal navigiram u "frontend" folder i kucam  "npm install react-hook-form yup @hookform/resolvers", jer Yup sluzi za validaciju u formi

34) LoginPage folder kreiranje

35) RegisterPage kreiranje

36) U Routes folder kreiram ProtectedRoute.tsx 

37) StockComment kreiram koga dodajem u CompanyProfile

38) CommentService kreiram u Services folder

39) U Models kreiram CommentPost za prihvatanje return polja iz backend endpoint 

40) Create StockCommentList

41) U Models, Create CommentGetFromBackend za StockCommentList

42) PortfolioService kreiram

43) Kreiram u Models PortfolioGetFromBackend za PortfolioService